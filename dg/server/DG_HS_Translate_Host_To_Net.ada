--
--                            U N C L A S S I F I E D
--
--  *=========================================================================*
--  |                                                                         |
--  |                         Manned Flight Simulator                         |
--  |                Naval Air Warfare Center Aircraft Division               |
--  |                        Patuxent River, Maryland                         |
--  |                                                                         |
--  *=========================================================================*
--
------------------------------------------------------------------------------
--
-- UNIT NAME        : DG_Host_Specific.Translate_Host_To_Net
--
-- FILE NAME        : DG_HS_Translate_Host_To_Net.ada
--
-- PROJECT          : Ada Distributed Interactive Simulation (ADIS)
--                    DIS Gateway (DG) CSCI
--
-- AUTHOR           : B. Dufault - J. F. Taylor, Inc.
--
-- ORIGINATION DATE : August 29, 1994
--
-- PURPOSE:
--   - Performs any conversion necessary to make a PDU generated by the host
--     compatible with the network specification.
--
-- IMPLEMENTATION NOTES:
--   - None.
--
-- EXCEPTIONS:
--   - None.
--
-- PORTABILITY ISSUES:
--   - This version of the Translate_Host_To_Net routine is specific to the
--     SGI IRIX 5.2 release of the Verdix Ada Compiler Version 6.2.  It
--     accounts for the problems encountered due to Verdix Ada's "dope
--     vector", which consists of 16-18 bytes of data between the static
--     and variant sections of variant record types.
--
-- ANTICIPATED CHANGES:
--   - None.
--
------------------------------------------------------------------------------

with DG_Verdix_Dope_Vector,
     DIS_Types,
     System;

separate (DG_Host_Specific)

procedure Translate_Host_To_Net(
   PDU    : in out DG_Generic_PDU.GENERIC_PDU_POINTER_TYPE;
   Status :    out DG_Status.STATUS_TYPE) is

   --
   -- PDUs which do NOT have a dope vector have all information fields set
   -- to zero.
   --
   K_No_Dope_Vector : constant DG_Verdix_Dope_Vector.DOPE_VECTOR_INFO_TYPE
                        := (Static_Start  => 0,
                            Dope_Start    => 0,
                            Variant_Start => 0);

   PDU_Header  : DIS_Types.A_PDU_HEADER;
     for PDU_Header use at PDU.ALL'ADDRESS;

   Undoped_Length : INTEGER;
   Undoped_PDU    : DG_Generic_PDU.GENERIC_PDU_POINTER_TYPE;

   function "="(Left, Right : DG_Verdix_Dope_Vector.DOPE_VECTOR_INFO_TYPE)
     return BOOLEAN
       renames DG_Verdix_Dope_Vector."=";

begin  -- Translate_Host_To_Net

   Status := DG_Status.SUCCESS;

   if (DG_Verdix_Dope_Vector.Offset(PDU_Header.PDU_Type) /= K_No_Dope_Vector)
   then

      Undoped_Length
        := PDU.ALL'LENGTH
             - (DG_Verdix_Dope_Vector.Offset(PDU_Header.PDU_Type).
                 Variant_Start - DG_Verdix_Dope_Vector.Offset(
                   PDU_Header.PDU_Type).Dope_Start);

      Undoped_PDU := new DG_Generic_PDU.GENERIC_PDU_TYPE(1..Undoped_Length);

      --
      -- Copy static portions of PDU
      --
      Undoped_PDU(
        DG_Verdix_Dope_Vector.Offset(PDU_Header.PDU_Type).Static_Start+1
          ..DG_Verdix_Dope_Vector.Offset(PDU_Header.PDU_Type).Dope_Start)
        := PDU(
             DG_Verdix_Dope_Vector.Offset(PDU_Header.PDU_Type).Static_Start+1
               ..DG_Verdix_Dope_Vector.Offset(PDU_Header.PDU_Type).
                   Dope_Start);

      --
      -- Skip over dope vector portions of PDU
      --

      --
      -- Copy dynamic portions (if any) of PDU
      --
      if (Undoped_PDU.ALL'LAST >= DG_Verdix_Dope_Vector.Offset(PDU_Header.
        PDU_Type).Dope_Start+1) then

         Undoped_PDU(
           DG_Verdix_Dope_Vector.Offset(PDU_Header.PDU_Type).Dope_Start+1
             ..Undoped_PDU.ALL'LAST)
           := PDU(
                DG_Verdix_Dope_Vector.Offset(PDU_Header.PDU_Type).
                  Variant_Start+1..PDU.ALL'LAST);

      end if;

      --
      -- Deallocated dope vector PDU
      --
      DG_Generic_PDU.Free_Generic_PDU(PDU);

      --
      -- Reassign PDU to undoped data
      --
      PDU := Undoped_PDU;

   end if;

exception

   when STORAGE_ERROR =>

      Status := DG_Status.DG_PLACEHOLDER_ERROR;

   when OTHERS =>

      Status := DG_Status.DG_PLACEHOLDER_ERROR;

end Translate_Host_To_Net;

------------------------------------------------------------------------------
--
-- MODIFICATION HISTORY:
--
------------------------------------------------------------------------------
